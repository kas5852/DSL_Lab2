{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Programming Questions\n",
    "\n",
    "## 1. Correlations\n",
    "\n",
    "a) When given a data matrix, an easy way to tell if any two columns are correlated is to\n",
    "look at a scatter plot of each column against each other column. For a warm up, do this:\n",
    "Look at the data in DF1 in **Lab2 Data.zip**. Which columns are (pairwise) correlated?\n",
    "Figure out how to do this with Pandas, and also how to do this with Seaborn.\n",
    "  \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "b) Compute the covariance matrix of the data. Write the explicit expression for what this\n",
    "is, and then use any command you like (e.g., np.cov) to compute the 4 × 4 matrix.\n",
    "Explain why the numbers that you get fit with the plots you got."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "c) The above problem in reverse. Generate a zero-mean multivariate Gaussian random\n",
    "variable in 3 dimensions, $Z = (X1, X2, X3)$ so that $(X1, X2)$ and $(X1, X3)$ are uncorrelated, but $(X2, X3)$ are correlated. Specifically: choose a covariance matrix that has the\n",
    "above correlations structure, and write this down. Then find a way to generate samples\n",
    "from this Gaussian. Choose one of the non-zero covariance terms ($C_{ij}$ , if $C$ denotes\n",
    "your covariance matrix) and plot it vs the estimated covariance term, as the number of\n",
    "samples you use scales. The goal is to get a visual representation of how the empirical\n",
    "covariance converges to the true (or family) covariance.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Outliers\n",
    "\n",
    "Consider the two-dimensional data in DF2 in **Lab2 Data.zip**. Look at a scatter\n",
    "plot of the data. It contains two points that look like potential outliers. Which one is “more”\n",
    "outlying? Propose a transformation of the data that makes it clear that the point at (−1, 1)\n",
    "is more outlying than the point at (5.5, 5), even though the latter point is“farther away”\n",
    "from the nearest points. Plot the data again after performing this transformation. Provide\n",
    "discussion as appropriate to justify your choice of transformation. *Hint: if y comes from a\n",
    "standard Gaussian in two dimensions (i.e., with covariance equal to the two by two identity\n",
    "matrix), and\n",
    "\n",
    "$Q = \\binom{2,1/2}{1/2,2}$\n",
    "\n",
    "\n",
    "*what is the covariance matrix of the random variable $z = Qy$? If you are given $z$, how would\n",
    "you create a random Gaussian vector with covariance equal to the identity, using $z$?*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Even More Standard Error\n",
    "\n",
    "This is to be completed only after you’ve completed the\n",
    "last written exercise below). In one of the written exercises below, you derive an expression\n",
    "1\n",
    "for what is called the Standard Error: where $β$ denotes the “truth,” $βˆ$ denotes the value we\n",
    "compute using least squares linear regression, and $Z$ and $e$ are as in the exercise below, you\n",
    "find:\n",
    "\n",
    "$βˆ − β = Ze$\n",
    "\n",
    "\n",
    "If we know the distribution of the noise (the distribution generating the noise vectors, $e_{i}$),\n",
    "then we know the distribution for the error, $(βˆ − β)$. This allows us to answer the question\n",
    "given in class: if we solve a regression and obtain value $βˆ$, how can we tell if it is statistically\n",
    "significant? The answer is: we compare the size of $βˆ$ to the spread introduced by the noise\n",
    "(i.e., the standard error), and we ask: what is the likelihood that the true $β$ = 0, and what\n",
    "we observed was purely due to the noise.\n",
    "\n",
    "If the noise is Gaussian (normal), i.e., $e_{i}$ ∼ $\\mathcal{N}$(0, $σ^2$)\n",
    "), and if the values of the $x_{i}$ are normalized,\n",
    "then we expect error of the size $σ/√n$, as this is roughly the standard deviation of the\n",
    "expression for the error that you derive above. This means: if you have twice the data points,\n",
    "you should expect the error to be reduced by about 1.4 (the formula says that the standard\n",
    "deviation of the error would decrease by a factor of 1/\n",
    "√\n",
    "2).\n",
    "\n",
    "\n",
    "Compute this empirically, as follows: We will generate data for a regression problem, solve\n",
    "it, and see what the error is: Generate data as I did in the example from class: $x_{i}$ ∼ $\\mathcal{N}$(0, 1),\n",
    "$e_{i}$ ∼ $\\mathcal{N}$(0, 1). Generate $y$ by $y_{i}$ = $β_{0}$ + $x_{i}$$β$ + $e_{i}$\n",
    ", where $β_{0}$ = −3 and $β$ = 0. Note that\n",
    "since $β$ = 0, this means that y and x are unrelated! The question we are exploring here is as\n",
    "follows: when we solve a regression problem, we are not going to find $βˆ$ = 0 – we will find\n",
    "that $βˆ$ takes some other values, hopefully close to zero. How do we know if the value of $βˆ$ we\n",
    "get is statistically meaningful?\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "• By creating fresh data and each time computing $βˆ$ and recording $βˆ − β$, compute the\n",
    "empirical standard deviation of the error for $n$ = 150 (the number we used in class). In\n",
    "class, in the exercise where I tried to find a linear regression of y vs. noise, we found\n",
    "$βˆ$ = −0.15. Given your empirical computation of the standard deviation of the error,\n",
    "how significant is the value −0.15?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "• Now repeat the above experiment for different values of $n$. Plot these values, and on the\n",
    "same plot, plot 1/\n",
    "√\n",
    "$n$. How is the fit?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Names and Frequencies. \n",
    "The goal of this exercise is for you to get more experience with\n",
    "Pandas, and to get a chance to explore a cool data set. Download the file Names.zip from\n",
    "Canvas. This contains the frequency of all names that appeared more than 5 times on a social\n",
    "security application from 1880 through 2015.\n",
    "\n",
    "• Write a program that on input $k$ and XXXX, returns the top $k$ names from year\n",
    "XXXX.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "• Write a program that on input Name returns the frequency for men and women of the\n",
    "name Name.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "• It could be that names are more diverse now than they were in 1880, so that a name may\n",
    "be relatively the most popular, though its frequency may have been decreasing over the\n",
    "years. Modify the above to return the relative frequency. Note that in the next coming\n",
    "lectures we will learn how to quantify diversity using entropy.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "• Find all the names that used to be more popular for one gender, but then became more\n",
    "popular for another gender.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "• (Optional) Find something cool about this data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Visualization Tools and Missing/Hidden Values. \n",
    "Visualization is important both for\n",
    "exploring the data, as well as for explaining what you have done. There are a huge number\n",
    "of such tools now available. This exercise walks through various functionalities of matplotlib\n",
    "and pandas.\n",
    "\n",
    "• The first part of this exercise was created by Dataquest. Run through the commands\n",
    "given in this tutorial: https://www.dataquest.io/blog/matplotlib-tutorial/ and understand the code.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "• Suppose that you would now like to plot some of the results by state. As you will see,\n",
    "the state information is sometimes missing, and other times it comes in varying forms.\n",
    "Figure out how to aggregate the results by state. The challenge here: how many of the\n",
    "tweets can you (correctly) assign to a state? Note: depending on how well you want to\n",
    "do (i.e., how many tweets you want to correctly assign to their state), this is not an easy\n",
    "problem!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 6. More Visualization Tools – Optional. \n",
    "This exercise was also created by Dataquest. Run\n",
    "through the exercise https://www.dataquest.io/blog/python-data-visualization-libraries/\n",
    "for more visualization tools, including some that allow you to plot points on a map, and also\n",
    "to create interactive maps (zoom in, etc.)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
